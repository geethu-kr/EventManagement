import json

import requests
import os
import re

# ----------------------------------------------------  Methods  ----------------------------------------------- #


def call_exit():
    if os.path.exists("events.json"):
        os.remove("events.json")
    if os.path.exists("subscriptions.json"):
        os.remove("subscriptions.json")

    print("--------------Exiting the process----------------")
    exit(0)


def validate_url(subscription_url):
    if len(subscription_url) == 0:
        print("Subscription URL not received")
        return "false"
    regex = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)

    if not re.match(regex, subscription_url):
        print("Invalid URL received")
        return "false"
    else:
        return "true"


def call_status_api(api_response):
    if api_response.status_code != 202:
        print("Request failed : ", api_response.status_code, api_response.reason, api_response.content)

    else:
        status_url = env + api_response.json()["statusUri"]
        print("Status URL : ", status_url)
        api_response = requests.get(url=status_url, headers=HEADERS)
        print("RESPONSE : ", response.status_code, response.reason)
        content = response.json()
        if content["apiStatus"] == "FAILURE":
            print(json.dumps(content, indent=4))
        else:
            print("Status message : ", content["statusMessage"])


def subscription_payload(name, subscription_url, subscribed_events_ids):
    if len(name) == 0:
        name = "sample_name";
    content = [
        {
            "name": name,
            "description": "",
            "subscriptionEndpoints": [
                {
                    "subscriptionDetails": {
                        "connectorType": "REST",
                        "name": "no-auth-post",
                        "description": "webhook",
                        "method": "POST",
                        "trustCert": "true",
                        "url": subscription_url,
                        "headers": [
                            {
                                "name": "",
                                "value": "",
                                "defaultValue": "null",
                                "dataType": "null",
                                "required": "false",
                                "encrypt": "false",
                                "key": "",
                                "evaluatedValue": "null"
                            }
                        ]
                    }
                }
            ],
            "filter": {
                "eventIds": [
                    "sample_event"
                ]
            }
        }
    ]
    name = input("Please prove subscription name : ")
    if len(name) != 0:
        content[0]["name"] = name
    content[0]["filter"]["eventIds"] = subscribedEventsIds
    content[0]["subscriptionEndpoints"][0]["subscriptionDetails"]["url"] = subscriptionURL
    return content


# ---------------------------------------------------- User Input ----------------------------------------------- #


# defining a params dict for the parameters to be sent to the API
print("Please provide the below details :")

scope = input("scope : ")
if len(scope) == 0:
    scope = "IDM:SSO:CCO_TM"

grant_type = input("grant_type : ")
if len(grant_type) == 0:
    grant_type = "client_credentials"

client_id = input("client_id : ")
if len(client_id) == 0:
    client_id = "89ede7d2-19a6-4b11-9deb-8f6643a8dab1"

client_secret = input("client_secret : ")
if len(client_secret) == 0:
    client_secret = "1c01712a-ad06-43da-bcdc-5f81cbf8ad15"


# ----------------------------------------------------- Get Token ------------------------------------------------ #

AuthURL = "https://staging-dnaservices.cisco.com/idm/api/v1/oauth/token"
PARAMS = {'scope': scope, 'grant_type': grant_type, 'client_id': client_id, 'client_secret': client_secret}

# sending post request and saving the response as response object
r = requests.post(url=AuthURL,  params=PARAMS)

# exception handling
if r.status_code != 200:
    print(r.status_code, r.reason)

else:
    data = r.json()
    token = data['access_token']
    print("RESPONSE", r.status_code, r.reason)

env = input("Env base URL : ")
if len(env) == 0:
    env = "https://rakuten-cvim-1.cisco.com"
else:
    if not validate_url(env):
        call_exit()

# --------------------------------------------------- Get Artifacts ---------------------------------------------- #

getArtifactsURL = env+"/dna/system/api/v1/event/artifact"

Cookie = "X-JWT-ACCESS-TOKEN=" + token
HEADERS = {'Cookie': Cookie}
print("Receiving latest artifacts...")
response = requests.get(url=getArtifactsURL, headers=HEADERS)

print("Artifacts received ", response.status_code, response.reason)

json_obj = response.json()

if os.path.exists("events.json"):
    os.remove("events.json")

f = open("events.json", "x")
events = {'events': []}


for i in json_obj:
    events["events"].append(
        {"event": i['artifactId'], "subscribe": "false"}
    )

jsonObjEvents = json.dumps(events, indent=4)
f.write(jsonObjEvents)
f.close()

print()
print("Populated events.json is the current location.")
print("Update the \"subscribe\" field in the events.json before proceeding")
proceed = input("Continue subscription ? Y/N")

# --------------------------------------------------- Subscribe ---------------------------------------------- #
subscriptionsURL = env+"/dna/intent/api/v1/event/subscription"
if proceed.upper() == "Y":
    subscriptionURL = input("Please provide subscription URL : ")
    if validate_url(subscriptionURL):
        with open('events.json') as f:
            data = json.load(f)

        subscribedEventsIds = []
        for events in data:
            for event in data[events]:
                if event["subscribe"] == "true":
                    print("Subscribing to " + event["event"])
                    subscribedEventsIds.append(event["event"])

        if len(subscribedEventsIds) == 0:
            print("No subscriptions to process")
        else:

            print("Initiating subscription of events : ", subscribedEventsIds, "to", subscriptionURL)
            subscription_name = input("Please provide subscription name :")
            DATA = subscription_payload(subscription_name , subscriptionURL, subscribedEventsIds)
            response = requests.post(url=subscriptionsURL, headers=HEADERS, json=DATA)
            call_status_api(response)
    else:
        print("Skip events subscription")
        print()
else:
    print("Skipping event subscription")
    print()

# ------------------------------------------------- Get Subscriptions -------------------------------------------- #

response = requests.get(url=subscriptionsURL, headers=HEADERS)
print("Receiving subscribed events...")
print("Subscriptions received ", response.status_code, response.reason)

json_obj = response.json()

if os.path.exists("subscriptions.json"):
    os.remove("subscriptions.json")

f = open("subscriptions.json", "x")
events = {"subscriptions": []}


for i in json_obj:
    events["subscriptions"].append(
        {
            "subscriptionId": i["subscriptionId"],
            "eventIds": i["filter"]["eventIds"],
            "url": i["subscriptionEndpoints"][0]["subscriptionDetails"]["url"],
            "unsubscribe": "false"
        }
    )

jsonObjEvents = json.dumps(events, indent=4)
f.write(jsonObjEvents)
f.close()

print()
print("Populated subscriptions.json is the current location.")
print("Update the \"unsubscribe\" field in the subscriptions.json before proceeding")
proceed = input("Continue un-subscription ? Y/N")

# ----------------------------------------------- Delete Subscriptions ------------------------------------------ #
if proceed.upper() == "Y":
    with open('subscriptions.json') as f:
        data = json.load(f)

    subscriptionIds = ""
    for subscriptions in data:
        for subscription in data[subscriptions]:
            if subscription["unsubscribe"] == "true":
                print("Unregistering subscription to ", subscription["eventIds"])
                if len(subscriptionIds) == 0:
                    subscriptionIds = subscriptionIds + ","
                subscriptionIds = subscriptionIds + (subscription["subscriptionId"])
    if len(subscriptionIds) == 0:
        print("No subscriptions selected for unregistering")
        print("Un-subscription Skipped")
        print()
    else:
        response = requests.delete(url=subscriptionsURL, headers=HEADERS, params=subscriptionIds)
        call_status_api(response)

# ----------------------------------------- Initiating resource cleanup ----------------------------------------- #

call_exit()

